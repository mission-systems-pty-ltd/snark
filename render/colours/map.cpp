// Copyright (c) 2023-24 Vsevolod vlaskine

#include <comma/math/cyclic.h>
#include "map.h"

namespace snark { namespace render { namespace colours {

map::values map::constant( unsigned char r, unsigned char g, unsigned char b )
{
    values v;
    //for( unsigned int i = 0; i < 255; ++i ) { v[i][red] = ( i * r ) / 256; v[i][green] = ( i * g ) / 256; v[i][blue] = ( i * b ) / 256; }
    for( unsigned int i = 0; i < 256; ++i )
    {
        v[i][red] = ( i * r ) / 255; v[i][green] = ( i * g ) / 255; v[i][blue] = ( i * b ) / 255;
    }
    return v;
}

map::values map::temperature( unsigned char offset_r, unsigned char offset_g )
{
    values v;
    for( unsigned int i = 0; i < offset_r; ++i )
    {
        v[i][red] = ( i * 255 ) / offset_r;
        v[i][green] = 0;
        v[i][blue] = 0;
    }
    for( unsigned int i = offset_r; i < ( offset_r + offset_g ); ++i )
    {
        v[i][red] = 255;
        v[i][green] = ( ( i - offset_r ) * 255 ) / offset_g;
        v[i][blue] = 0;
    }
    for( unsigned int i = offset_r + offset_g; i < 256; ++i )
    {
        v[i][red] = 255;
        v[i][green] = 255;
        v[i][blue] = ( ( i - offset_r - offset_g ) * 255 ) / ( 256 - offset_r - offset_g );
    }
    return v;
}

static void jet_impl_( map::values& v, map::channels channel, int offset )
{
    for( unsigned int i = 0; i < 256; ++i ) { v[i][channel] = 0; }
    comma::math::cyclic< unsigned int > c( 0, 256 );
    c += offset;
    for( unsigned int i = 1; i < 64; ++i, ++c ) { v[ c() ][channel] = i * 4; }
    for( unsigned int i = 0; i < 65; ++i, ++c ) { v[ c() ][channel] = 255; }
    for( unsigned int i = 1; i < 64; ++i, ++c ) { v[ c() ][channel] = 255 - i * 4; }
}

map::values map::jet()
{
    values v;
    jet_impl_( v, red, 32 + 64 );
    jet_impl_( v, green, 32 );
    jet_impl_( v, blue, -32 );
    for( unsigned int i = 0; i < 64; ++i ) { v[i][red] = 0; }
    for( unsigned int i = 256 - 64; i < 256; ++i ) { v[i][blue] = 0; }
    return v;
}

// python3 -c "import numpy,matplotlib; print('map::values map::magma()\n{\n\t' + 'return {'+str([list(numpy.array(numpy.array(matplotlib.cm.magma(val))[:-1]*2**8, dtype=numpy.uint8)) for val in range(2**8)]).replace('[','{').replace(']','}')+'};' + '\n}')"
map::values map::magma()
{
    return {{{0, 0, 3}, {0, 0, 4}, {0, 0, 6}, {1, 0, 7}, {1, 1, 9}, {1, 1, 11}, {2, 2, 13}, {2, 2, 15}, {3, 3, 17}, {4, 3, 19}, {4, 4, 21}, {5, 4, 23}, {6, 5, 25}, {7, 5, 27}, {8, 6, 29}, {9, 7, 32}, {10, 7, 34}, {11, 8, 36}, {12, 9, 38}, {13, 10, 40}, {14, 10, 42}, {15, 11, 45}, {16, 12, 47}, {17, 12, 49}, {19, 13, 51}, {20, 13, 54}, {21, 14, 56}, {22, 14, 58}, {23, 15, 61}, {25, 15, 63}, {26, 16, 66}, {27, 16, 68}, {28, 16, 70}, {30, 17, 73}, {31, 17, 75}, {33, 17, 78}, {34, 17, 80}, {36, 17, 83}, {37, 17, 85}, {39, 17, 87}, {40, 17, 90}, {42, 17, 92}, {43, 17, 94}, {45, 17, 97}, {47, 16, 99}, {49, 16, 101}, {50, 16, 103}, {52, 16, 105}, {54, 15, 107}, {55, 15, 108}, {57, 15, 110}, {59, 15, 112}, {61, 15, 113}, {62, 15, 114}, {64, 15, 116}, {66, 15, 117}, {67, 15, 118}, {69, 15, 119}, {71, 15, 120}, {72, 16, 120}, {74, 16, 121}, {76, 16, 122}, {77, 17, 123}, {79, 17, 123}, {81, 18, 124}, {82, 18, 124}, {84, 19, 125}, {85, 20, 125}, {87, 20, 126}, {88, 21, 126}, {90, 21, 126}, {92, 22, 127}, {93, 23, 127}, {95, 23, 127}, {96, 24, 128}, {98, 25, 128}, {99, 25, 128}, {101, 26, 128}, {103, 26, 128}, {104, 27, 129}, {106, 28, 129}, {107, 28, 129}, {109, 29, 129}, {110, 30, 129}, {112, 30, 129}, {113, 31, 129}, {115, 32, 129}, {117, 32, 129}, {118, 33, 129}, {120, 33, 129}, {121, 34, 130}, {123, 35, 130}, {124, 35, 130}, {126, 36, 130}, {128, 36, 130}, {129, 37, 129}, {131, 37, 129}, {132, 38, 129}, {134, 39, 129}, {136, 39, 129}, {137, 40, 129}, {139, 40, 129}, {140, 41, 129}, {142, 41, 129}, {144, 42, 129}, {145, 42, 129}, {147, 43, 128}, {148, 43, 128}, {150, 44, 128}, {152, 44, 128}, {153, 45, 128}, {155, 46, 127}, {157, 46, 127}, {158, 47, 127}, {160, 47, 127}, {161, 48, 126}, {163, 48, 126}, {165, 49, 126}, {166, 49, 125}, {168, 50, 125}, {170, 50, 125}, {171, 51, 124}, {173, 51, 124}, {175, 52, 123}, {176, 52, 123}, {178, 53, 123}, {180, 53, 122}, {181, 54, 122}, {183, 55, 121}, {185, 55, 121}, {186, 56, 120}, {188, 56, 120}, {189, 57, 119}, {191, 57, 118}, {193, 58, 118}, {194, 59, 117}, {196, 59, 117}, {198, 60, 116}, {199, 61, 115}, {201, 61, 115}, {202, 62, 114}, {204, 63, 113}, {206, 63, 113}, {207, 64, 112}, {209, 65, 111}, {210, 66, 110}, {212, 67, 110}, {213, 67, 109}, {215, 68, 108}, {216, 69, 107}, {218, 70, 107}, {219, 71, 106}, {221, 72, 105}, {222, 73, 104}, {223, 74, 103}, {225, 75, 103}, {226, 76, 102}, {227, 78, 101}, {229, 79, 100}, {230, 80, 100}, {231, 81, 99}, {232, 83, 98}, {233, 84, 97}, {234, 85, 97}, {236, 87, 96}, {237, 88, 95}, {238, 90, 95}, {239, 91, 94}, {239, 93, 94}, {240, 95, 93}, {241, 96, 93}, {242, 98, 93}, {243, 100, 92}, {243, 101, 92}, {244, 103, 92}, {245, 105, 92}, {246, 107, 92}, {246, 108, 92}, {247, 110, 92}, {247, 112, 92}, {248, 114, 92}, {248, 116, 92}, {249, 118, 92}, {249, 120, 92}, {250, 121, 93}, {250, 123, 93}, {250, 125, 94}, {251, 127, 94}, {251, 129, 95}, {251, 131, 95}, {252, 133, 96}, {252, 135, 97}, {252, 137, 97}, {252, 139, 98}, {253, 140, 99}, {253, 142, 100}, {253, 144, 101}, {253, 146, 102}, {253, 148, 103}, {254, 150, 104}, {254, 152, 105}, {254, 154, 106}, {254, 156, 107}, {254, 157, 108}, {254, 159, 109}, {254, 161, 110}, {254, 163, 111}, {254, 165, 112}, {255, 167, 114}, {255, 169, 115}, {255, 171, 116}, {255, 172, 118}, {255, 174, 119}, {255, 176, 120}, {255, 178, 122}, {255, 180, 123}, {255, 182, 124}, {255, 184, 126}, {255, 185, 127}, {255, 187, 129}, {255, 189, 130}, {255, 191, 132}, {255, 193, 133}, {255, 195, 135}, {255, 197, 136}, {255, 198, 138}, {255, 200, 140}, {255, 202, 141}, {255, 204, 143}, {254, 206, 144}, {254, 208, 146}, {254, 209, 148}, {254, 211, 149}, {254, 213, 151}, {254, 215, 153}, {254, 217, 155}, {254, 219, 156}, {254, 220, 158}, {254, 222, 160}, {254, 224, 162}, {254, 226, 163}, {253, 228, 165}, {253, 230, 167}, {253, 231, 169}, {253, 233, 171}, {253, 235, 172}, {253, 237, 174}, {253, 239, 176}, {253, 241, 178}, {253, 242, 180}, {253, 244, 182}, {253, 246, 184}, {252, 248, 186}, {252, 250, 188}, {252, 251, 189}, {252, 253, 191}}};
}

// python3 -c "import numpy,matplotlib; print('map::values map::viridis()\n{\n\t' + 'return {'+str([list(numpy.array(numpy.array(matplotlib.cm.viridis(val))[:-1]*2**8, dtype=numpy.uint8)) for val in range(2**8)]).replace('[','{').replace(']','}')+'};' + '\n}')"
map::values map::viridis()
{
        return {{{68, 1, 84}, {68, 2, 85}, {69, 3, 87}, {69, 5, 88}, {69, 6, 90}, {70, 8, 91}, {70, 9, 93}, {70, 11, 94}, {70, 12, 96}, {71, 14, 97}, {71, 15, 98}, {71, 17, 100}, {71, 18, 101}, {71, 20, 102}, {72, 21, 104}, {72, 22, 105}, {72, 24, 106}, {72, 25, 108}, {72, 26, 109}, {72, 28, 110}, {72, 29, 111}, {72, 30, 112}, {72, 32, 113}, {72, 33, 115}, {72, 34, 116}, {72, 36, 117}, {72, 37, 118}, {72, 38, 119}, {72, 39, 120}, {71, 41, 121}, {71, 42, 121}, {71, 43, 122}, {71, 44, 123}, {71, 46, 124}, {70, 47, 125}, {70, 48, 126}, {70, 49, 126}, {70, 51, 127}, {69, 52, 128}, {69, 53, 129}, {69, 54, 129}, {68, 56, 130}, {68, 57, 131}, {68, 58, 131}, {67, 59, 132}, {67, 60, 132}, {67, 62, 133}, {66, 63, 133}, {66, 64, 134}, {65, 65, 134}, {65, 66, 135}, {65, 67, 135}, {64, 69, 136}, {64, 70, 136}, {63, 71, 136}, {63, 72, 137}, {62, 73, 137}, {62, 74, 137}, {61, 75, 138}, {61, 77, 138}, {60, 78, 138}, {60, 79, 138}, {59, 80, 139}, {59, 81, 139}, {58, 82, 139}, {58, 83, 139}, {57, 84, 140}, {57, 85, 140}, {56, 86, 140}, {56, 87, 140}, {55, 88, 140}, {55, 89, 140}, {54, 91, 141}, {54, 92, 141}, {53, 93, 141}, {53, 94, 141}, {52, 95, 141}, {52, 96, 141}, {51, 97, 141}, {51, 98, 141}, {51, 99, 141}, {50, 100, 142}, {50, 101, 142}, {49, 102, 142}, {49, 103, 142}, {48, 104, 142}, {48, 105, 142}, {47, 106, 142}, {47, 107, 142}, {47, 108, 142}, {46, 109, 142}, {46, 110, 142}, {45, 111, 142}, {45, 112, 142}, {45, 112, 142}, {44, 113, 142}, {44, 114, 142}, {43, 115, 142}, {43, 116, 142}, {43, 117, 142}, {42, 118, 142}, {42, 119, 142}, {41, 120, 142}, {41, 121, 142}, {41, 122, 142}, {40, 123, 142}, {40, 124, 142}, {40, 125, 142}, {39, 126, 142}, {39, 127, 142}, {38, 128, 142}, {38, 129, 142}, {38, 130, 142}, {37, 131, 142}, {37, 131, 142}, {37, 132, 142}, {36, 133, 142}, {36, 134, 142}, {35, 135, 142}, {35, 136, 142}, {35, 137, 142}, {34, 138, 141}, {34, 139, 141}, {34, 140, 141}, {33, 141, 141}, {33, 142, 141}, {33, 143, 141}, {32, 144, 141}, {32, 145, 140}, {32, 146, 140}, {32, 147, 140}, {31, 147, 140}, {31, 148, 140}, {31, 149, 139}, {31, 150, 139}, {31, 151, 139}, {30, 152, 139}, {30, 153, 138}, {30, 154, 138}, {30, 155, 138}, {30, 156, 137}, {30, 157, 137}, {30, 158, 137}, {30, 159, 136}, {30, 160, 136}, {31, 161, 136}, {31, 162, 135}, {31, 163, 135}, {31, 163, 134}, {32, 164, 134}, {32, 165, 134}, {33, 166, 133}, {33, 167, 133}, {34, 168, 132}, {35, 169, 131}, {35, 170, 131}, {36, 171, 130}, {37, 172, 130}, {38, 173, 129}, {39, 174, 129}, {40, 175, 128}, {41, 175, 127}, {42, 176, 127}, {43, 177, 126}, {44, 178, 125}, {46, 179, 124}, {47, 180, 124}, {48, 181, 123}, {50, 182, 122}, {51, 183, 121}, {53, 183, 121}, {54, 184, 120}, {56, 185, 119}, {57, 186, 118}, {59, 187, 117}, {61, 188, 116}, {62, 189, 115}, {64, 190, 114}, {66, 190, 113}, {68, 191, 112}, {70, 192, 111}, {72, 193, 110}, {73, 194, 109}, {75, 194, 108}, {77, 195, 107}, {79, 196, 106}, {81, 197, 105}, {83, 198, 104}, {85, 198, 102}, {88, 199, 101}, {90, 200, 100}, {92, 201, 99}, {94, 201, 98}, {96, 202, 96}, {98, 203, 95}, {101, 204, 94}, {103, 204, 92}, {105, 205, 91}, {108, 206, 90}, {110, 206, 88}, {112, 207, 87}, {115, 208, 85}, {117, 208, 84}, {119, 209, 82}, {122, 210, 81}, {124, 210, 79}, {127, 211, 78}, {129, 212, 76}, {132, 212, 75}, {134, 213, 73}, {137, 213, 72}, {139, 214, 70}, {142, 215, 68}, {144, 215, 67}, {147, 216, 65}, {149, 216, 63}, {152, 217, 62}, {155, 217, 60}, {157, 218, 58}, {160, 218, 57}, {163, 219, 55}, {165, 219, 53}, {168, 220, 51}, {171, 220, 50}, {173, 221, 48}, {176, 221, 46}, {179, 221, 45}, {181, 222, 43}, {184, 222, 41}, {187, 223, 39}, {189, 223, 38}, {192, 223, 36}, {195, 224, 35}, {197, 224, 33}, {200, 225, 32}, {203, 225, 30}, {205, 225, 29}, {208, 226, 28}, {211, 226, 27}, {213, 226, 26}, {216, 227, 25}, {219, 227, 24}, {221, 227, 24}, {224, 228, 24}, {226, 228, 24}, {229, 228, 24}, {232, 229, 25}, {234, 229, 25}, {237, 229, 26}, {239, 230, 27}, {242, 230, 28}, {244, 230, 30}, {247, 230, 31}, {249, 231, 33}, {251, 231, 35}, {254, 231, 36}}};
}

// python3 -c "import numpy,matplotlib; print('map::values map::twilight()\n{\n\t' + 'return {'+str([list(numpy.array(numpy.array(matplotlib.cm.twilight(val))[:-1]*2**8, dtype=numpy.uint8)) for val in range(2**8)]).replace('[','{').replace(']','}')+'};' + '\n}')"
map::values map::twilight()
{
        return {{{226, 217, 227}, {226, 217, 227}, {225, 217, 226}, {225, 218, 226}, {224, 218, 226}, {223, 218, 226}, {223, 218, 225}, {222, 217, 225}, {221, 217, 225}, {221, 217, 224}, {220, 217, 224}, {219, 217, 223}, {218, 217, 223}, {217, 216, 222}, {217, 216, 222}, {216, 216, 221}, {215, 215, 221}, {214, 215, 221}, {213, 214, 220}, {211, 214, 219}, {210, 213, 219}, {209, 213, 218}, {208, 212, 218}, {207, 212, 217}, {206, 211, 217}, {204, 211, 216}, {203, 210, 216}, {202, 209, 215}, {200, 209, 214}, {199, 208, 214}, {197, 207, 213}, {196, 207, 213}, {195, 206, 212}, {193, 205, 211}, {192, 205, 211}, {190, 204, 210}, {189, 203, 210}, {187, 203, 209}, {186, 202, 209}, {184, 201, 208}, {183, 200, 208}, {181, 200, 207}, {179, 199, 207}, {178, 198, 206}, {176, 197, 206}, {175, 196, 205}, {173, 196, 205}, {172, 195, 204}, {170, 194, 204}, {169, 193, 204}, {167, 192, 203}, {166, 191, 203}, {164, 191, 202}, {163, 190, 202}, {161, 189, 202}, {160, 188, 201}, {158, 187, 201}, {157, 186, 201}, {156, 186, 200}, {154, 185, 200}, {153, 184, 200}, {151, 183, 200}, {150, 182, 199}, {149, 181, 199}, {147, 180, 199}, {146, 179, 198}, {145, 178, 198}, {144, 178, 198}, {142, 177, 198}, {141, 176, 198}, {140, 175, 197}, {139, 174, 197}, {137, 173, 197}, {136, 172, 197}, {135, 171, 197}, {134, 170, 196}, {133, 169, 196}, {132, 168, 196}, {130, 168, 196}, {129, 167, 196}, {128, 166, 195}, {127, 165, 195}, {126, 164, 195}, {125, 163, 195}, {124, 162, 195}, {123, 161, 195}, {122, 160, 194}, {121, 159, 194}, {120, 158, 194}, {119, 157, 194}, {118, 156, 194}, {118, 155, 194}, {117, 154, 193}, {116, 153, 193}, {115, 152, 193}, {114, 151, 193}, {113, 150, 193}, {113, 149, 193}, {112, 148, 192}, {111, 147, 192}, {110, 146, 192}, {110, 145, 192}, {109, 144, 192}, {108, 143, 192}, {108, 142, 192}, {107, 141, 191}, {107, 140, 191}, {106, 139, 191}, {105, 138, 191}, {105, 137, 191}, {104, 136, 190}, {104, 135, 190}, {103, 134, 190}, {103, 133, 190}, {102, 132, 190}, {102, 131, 189}, {101, 130, 189}, {101, 128, 189}, {101, 127, 189}, {100, 126, 189}, {100, 125, 188}, {100, 124, 188}, {99, 123, 188}, {99, 122, 188}, {99, 121, 187}, {98, 120, 187}, {98, 119, 187}, {98, 118, 187}, {98, 117, 186}, {97, 115, 186}, {97, 114, 186}, {97, 113, 185}, {97, 112, 185}, {97, 111, 185}, {96, 110, 184}, {96, 109, 184}, {96, 108, 184}, {96, 106, 183}, {96, 105, 183}, {96, 104, 183}, {96, 103, 182}, {95, 102, 182}, {95, 101, 182}, {95, 99, 181}, {95, 98, 181}, {95, 97, 180}, {95, 96, 180}, {95, 95, 179}, {95, 94, 179}, {95, 92, 178}, {95, 91, 178}, {95, 90, 177}, {95, 89, 177}, {95, 88, 176}, {94, 87, 176}, {94, 85, 175}, {94, 84, 175}, {94, 83, 174}, {94, 82, 173}, {94, 80, 173}, {94, 79, 172}, {94, 78, 172}, {94, 77, 171}, {94, 76, 170}, {94, 74, 170}, {94, 73, 169}, {94, 72, 168}, {94, 71, 167}, {94, 70, 167}, {93, 68, 166}, {93, 67, 165}, {93, 66, 164}, {93, 65, 163}, {93, 63, 162}, {93, 62, 162}, {93, 61, 161}, {93, 60, 160}, {93, 59, 159}, {92, 57, 158}, {92, 56, 157}, {92, 55, 156}, {92, 54, 155}, {92, 52, 154}, {91, 51, 153}, {91, 50, 152}, {91, 49, 151}, {91, 48, 149}, {90, 47, 148}, {90, 45, 147}, {90, 44, 146}, {90, 43, 145}, {89, 42, 143}, {89, 41, 142}, {89, 40, 141}, {88, 39, 139}, {88, 38, 138}, {87, 37, 136}, {87, 36, 135}, {86, 35, 133}, {86, 34, 132}, {85, 33, 130}, {85, 32, 129}, {84, 31, 127}, {84, 30, 126}, {83, 29, 124}, {83, 28, 122}, {82, 28, 121}, {81, 27, 119}, {81, 26, 117}, {80, 25, 116}, {79, 25, 114}, {78, 24, 112}, {78, 24, 111}, {77, 23, 109}, {76, 22, 107}, {75, 22, 105}, {75, 21, 104}, {74, 21, 102}, {73, 21, 100}, {72, 20, 98}, {71, 20, 97}, {70, 19, 95}, {69, 19, 93}, {69, 19, 92}, {68, 19, 90}, {67, 18, 89}, {66, 18, 87}, {65, 18, 85}, {64, 18, 84}, {64, 17, 82}, {63, 17, 81}, {62, 17, 79}, {61, 17, 78}, {60, 17, 77}, {59, 17, 75}, {59, 17, 74}, {58, 16, 73}, {57, 16, 71}, {57, 16, 70}, {56, 16, 69}, {55, 16, 68}, {54, 16, 67}, {54, 16, 65}, {53, 16, 64}, {53, 17, 63}, {52, 17, 62}, {52, 17, 61}, {51, 17, 61}, {51, 17, 60}, {50, 17, 59}, {50, 18, 58}, {49, 18, 57}, {49, 18, 56}, {48, 19, 56}, {47, 19, 55}, {47, 20, 54}}};
}

map::pixel map::contrast_to( const values& v )
{
    pixel p;
    for( unsigned int i = 0; i < 3; ++i )
    {
        unsigned int average = 0;
        for( unsigned int k = 0; k < 256; ++k ) { average += v[k][i]; }
        average /= 256;
        p[i] = 255 - average;
    }
    return p;
}

map::map( double from, double to, const colour< unsigned char >& from_colour, const colour< unsigned char >& to_colour )
    : from( from )
    , to( to )
    , diff( to - from )
    , from_colour( from_colour )
    , to_colour( to_colour )
{
}

map::map( double from, double to, const values& v )
    : from( from )
    , to( to )
    , diff( to - from )
    , values_( v )
{
}

colour< unsigned char > map::mapped( const double scalar ) const
{
    double v = ( scalar - from ) / diff;
    v = ( v < 0 ? 0 : v > 1 ? 1 : v );
    if( !values_ ) { return from_colour * ( 1 - v ) + to_colour * v; }
    unsigned int i = v * 255;
    return colour< unsigned char >( ( *values_ )[i][0], ( *values_ )[i][1], ( *values_ )[i][2] );
}

} } } // namespace snark { namespace render { namespace colours {
