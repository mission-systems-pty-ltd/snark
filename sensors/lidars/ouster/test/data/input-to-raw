# Convert input files to raw data
#
# Note that unlike the real device, this test code generates sparse data.
# In particular, it will include all channels in each block, but will skip azimuth blocks.
# It also makes no attempt to output complete packets.
#
# Usage:
# source ../../../data/input-to-raw
# input_to_raw --api <1|2> --channels <num-channels>

measurement_id=0

api_version=
num_channels=

function options()
{
    while [[ $# -gt 0 ]]; do
        arg="${1#*=}"
        case "$1" in
            --api)         shift; api_version=$1 ;;
            --api=*)       api_version=$arg ;;
            --channels)    shift; num_channels=$1 ;;
            --channels=*)  num_channels=$arg ;;
            -*)            echo "unrecognized option '$1'" >&2; exit 1 ;;
        esac
        shift
    done
}

function encode_header()
{
    local measurement_id=$1
    csv-paste "value=$(( measurement_id * 1000 )),$measurement_id" - | csv-to-bin ul,uw,uw,ui
}

function encode()
{
    local channel=$1
    local range=$2
    local signal=$3
    local reflectivity=$4
    local ambient=$5
    if (( channel == 0 )); then
        echo $frame_id,$curr_encoder_count | encode_header $measurement_id
        (( measurement_id++ ))
    fi
    echo $range,$signal,$reflectivity,$ambient | csv-to-bin ui,uw,uw,ui
    (( channel == num_channels - 1 )) && echo -1 | csv-to-bin i
}

function raw_packets()
{
    [[ $api_version ]] || { echo "input-to-raw/raw_packets() - api_version required" >&2; exit 1; }
    [[ $num_channels ]] || { echo "input-to-raw/raw_packets() - num_channels required" >&2; exit 1; }

    local curr_channel=0
    local curr_encoder_count=
    local done=0
    while (( !done )); do
        IFS=, read -r frame_id encoder_count channel range signal reflectivity ambient
        done=$?
        (( done && curr_channel == 0 )) && return
        : ${curr_encoder_count:=$encoder_count}
        while (( encoder_count != curr_encoder_count || channel != curr_channel )); do
            encode $curr_channel 0 0 0 0
            if (( ++curr_channel == $num_channels )); then
                (( done )) && return
                curr_channel=0
                curr_encoder_count=$encoder_count # jump to the next encoder count from input
            fi
        done
        encode $curr_channel $range $signal $reflectivity $ambient
        (( ++curr_channel == $num_channels )) && { curr_channel=0; (( curr_encoder_count+=44 )); }
    done
}

function input_to_raw()
{
    options $@
    grep '^[0-9]' | raw_packets
}
