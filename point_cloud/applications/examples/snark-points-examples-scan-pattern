#!/bin/bash

function say() { echo "$0: $1" >&2; }

function die() { say "$@"; exit 1; }

type -p zenity >/dev/null || die "please install zenity; run: sudo apt install zenity"

function camera-config()
{
    echo '{"center":{"x":50,"y":100,"z":0},"world":{"translation":{"x":0,"y":-50,"z":-50},"rotation":{"x":1.57079637,"y":-0,"z":0}},"camera":{"translation":{"x":100,"y":0,"z":-200},"rotation":{"x":0,"y":0,"z":0}},"projection":{"up":{"x":0,"y":0,"z":-1},"orthographic":true,"near_plane":0.01,"far_plane":1800,"field_of_view":45}}'
}

function make-grid()
{
    csv-paste 'line-number;shape=100,200,1' --head $(( 100 * 200 )) | csv-eval --fields x,y,z 's=y%2*-x'
}

function make-polygon()
{
    zenity --title "$0" --info --width 400 --text "in the following view, please use double right click to select polygon vertices; close view-points window once you have selected all desired vertices" 2>/dev/null
    rm -f vertices-pipe edges-pipe
    mkfifo vertices-pipe edges-pipe
    make-grid \
        | view-points '-' \
                    'vertices-pipe;size=100;weight=15;color=red' \
                    'edges-pipe;size=100;shape=line;color=red' \
                    --camera-config <( camera-config ) \
                    --hide-file-panel \
                    --window-geometry 0,0,1200,900 \
        | tee vertices-pipe \
        | csv-shape concatenate -n 2 --sliding-window \
        | tee edges-pipe
}

function grep-points()
{
    local polygon="$1"
    points-grep polygons --polygons <( echo "$polygon" )";fields=x,y"
}

function make-scan()
{
    local polygon="$1"
    make-grid \
        | grep-points "$polygon" \
        | csv-sort --fields ,y,,s \
        | view-points \
            <( make-grid )';color=grey' \
            <( make-grid | grep-points "$polygon" )';color=yellow' \
            '-;color=yellow;shape=lines' \
            <( echo "$polygon" )';weight=15;color=red' \
            <( echo "$polygon" )';shape=loop;color=red' \
            --camera-config <( camera-config ) \
            --hide-file-panel \
            --window-geometry 0,0,1600,1200 \
            'labeled-pipe;fields=x,y,z,id;weight=20'
}

trap "rm -f vertices-pipe edges-pipe" EXIT
edges=$( make-polygon )
polygon=$( cut -d, -f1-3 <<< "$edges"; tail -n1 <<< "$edges" | cut -d, -f4-6 )
make-scan "$polygon"


    