#!/bin/bash

name=$( basename $0 )

source $( which comma-application-util )

declare -r default_acceleration=1
declare -r default_time=1
declare -r default_tolerance=0.01
declare -ri number_of_joints=6
declare -ri number_of_pose_fields=6
function replicate { local what="$1"; local -i n=$2; local separator=${3:-,}; printf "$what"; printf "${separator}${what}%.0s" $( seq -s' ' 2 $n ); }
declare -r zeros=$( replicate 0 $number_of_joints )
function time_ { date +%s.%N; }
declare -rA wait_error=( [timed_out]=1 [status_unavailable]=2 )
declare -ra joint_names=( $( ur-arm-status --output-fields | tr ',' '\n' | grep arm/angles | sed 's|arm/angles/||' ) )
declare -r default_init_speed=0.025
declare -r default_init_time=10

function operation_description
{
    cat <<EOF
on; turn the arm on and prepare it for initialisation
off; turn the arm off
init; initialise the arm
stow; move the arm to home position
security-stop; security stop
free; release the arm so it can be moved manually
restore; restore normal operation after secutiry-stop or free
unlock-brakes; unlock brakes after emergency stop
stop; stop currently executed motion
wait; wait until the target waypoint is reached
io; set digital out to on/off
EOF
}


function option_description
{
    cat <<EOF
--timeout=[<timeout>]; timeout period for operations 'on' and 'wait'; no timeout by default
--config=[<config>]; arm config file (run '$name -h -v' to see a sample); optionally <config> can be followed by colon-separated prefix, e.g. --config=<config:prefix>
--prefix=[<prefix>]; the entry in the config file under which the script locates relevant info
--angles=[<angles>]; comma-separated list of angles of the target waypoint for operation 'wait'
--pose=[<pose>]; comma-separated list of pose values of the target waypoint for operation 'wait'
--tolerance=[<tolerance>]; tolerance used by operation 'wait' to determine if a waypoint is reached, default: $default_tolerance
--signal=[<signal>]; digital output signal, where <signal>=<id>,<on/off> with <id> identifying output id followed by on/off switch (used by operation io)
EOF
}

function usage
{
    cat >&2 <<EOF

    $name provides a suite of operations for managing the robotic arm

usage:
    $name <operation> [options]

operations:
$( operation_description | sed 's/^/    /g' )

options:
$( option_description | sed 's/^/    /g' )

to see further details use:
    $name -h -v

EOF

    if [[ "$1" == "verbose" ]]; then
    cat >&2 <<EOF
details of operations:
    on:
        turn the arm on, release the brakes and prepare for initialisation
        --timeout: exits if it takes more than timeout
    off:
        turn the arm off
    init:
        initialise the arm by moving joints one by one until their status changes from initialising to running
        control joints' movement via the keyboard: ' ' change direction, '+'/'-' increase/decrease speed
        defaults: speed=$default_init_speed, time=$default_init_time, acceleration=$default_acceleration
        if the arm config file has init section with speeds, times, and acceleration, use these values instead of default values
        if initialisation is successful, output init config with acceleration, final speed, and total time for each joint
    stow:
        move the arm to home position
    security-stop:
        security stop (subsequent move commands are ignored)
        to return to normal operation use 'restore'
    free:
        release the arm for manual operation (subsequent move commmands are ignored)
    restore:
        restore normal operation after security stop or free
    unlock-brakes:
        unlock brakes after emergency stop
    stop:
        stop currently executed motion without entering security stop mode (subsequent move commands are executed)
    wait:
        wait until the arm's joints have reached the target waypoint
        --angles: comma-separated list of the joint angles of the target waypoint (from base to wrist)
        --pose: comma-separated list of the pose values of the target waypoint (position and orientation)
        --tolerance: the target is considered reached if actual joint angles or pose values are within tolerance of the target values
        --timeout: exits with status ${wait_error[timed_out]} if it takes more than timeout to reach the target
        exit codes:
            0 -> target reached
            ${wait_error[timed_out]} -> timed out
            ${wait_error[status_unavailable]} -> arm status unavailable
    io:
        set digital out to on or off for output id specified by option --signal decorated with 'on' or 'off', e.g. $name io --signal=0,on

sample config file (with prefix=ur5 and assuming robot.arm is the IP address of the arm):

{
    "ur5":
    {
        "address": "robot.arm",
        "port": "30003",
        "command":
        {
            "address": "robot.arm",
            "port": "30002"
        },
        "publisher":
        {
            "data": { "address": "localhost", "port": "14000" }
        },
        "init":
        {
            "base": { "speed": "-0.25", "time": 2 },
            "shoulder": { "speed": "0.25","time": 2 },
            "elbow": { "speed": "-0.25", "time": 2 },
            "wrist1": { "speed": "-0.5", "time": 2 },
            "wrist2": { "speed": "-0.5", "time": 2 },
            "wrist3": { "speed": "-0.5", "time": 2 },
            "acceleration": 1
        },
        "stow":
        {
            "angles": "-3.14159,-2.32235940585,2.18441983289,0.144467050766,1.5707,0",
            "speed": "0.2"
        }
    }
}

EOF
    fi
    exit
}

function get { socat -u tcp:$publisher_address:$publisher_port - | ur-arm-status --fields="$1" | head -1; }
function send { socat -u - tcp:$command_address:$command_port; }
function send_command { echo "$1" | send; }

function turn_off { send_command 'power off'; }
function freedrive { send_command 'set robotmode freedrive'; }
function security_stop { send_command "stopj([$zeros])"; }
function stop_movement { send_command "stopj($default_acceleration)"; }
function restore { send_command 'set robotmode run'; }
function unlock_brakes { send_command 'power on'; }

function wait_for_target
{
    IFS=,
    local -r fields=$1
    local -r target_values=( $2 )
    local -ri number_of_values=$3
    local -r timeout=$4
    local -r tolerance="${options_tolerance:-$default_tolerance}"
    if (( ${#target_values[@]} != $number_of_values )); then echo "$name: $FUNCNAME: expected $number_of_values target values ($fields), got ${#target_values[@]}" >&2; exit -1; fi
    if (( `echo "$tolerance <= 0" | bc -l` )); then echo "$name: $FUNCNAME: expected positive tolerance, got $tolerance" >&2; exit -1; fi
    if [[ -n "$timeout" ]]; then
        if (( `echo "$timeout <= 0" | bc -l` )); then echo "$name: $FUNCNAME: expected positive timeout, got $timeout" >&2; exit -1; fi
        local -r end_time=$( echo "`time_` + $timeout" | bc -l )
    fi
    while :; do
        [[ -n "$end_time" ]] && if (( `echo "($( time_ )) > ($end_time)" | bc -l` )); then return ${wait_error[timed_out]}; fi
        local actual_values=( `get "$fields"` )
        if [[ -z "${actual_values[@]}" ]]; then return ${wait_error[status_unavailable]}; fi
        local -i target_reached=1
        for (( i=0; i<$number_of_values; i++ )); do
            python3 -c "exit(1) if abs(${target_values[$i]}-(${actual_values[$i]})) > $tolerance else exit(0)" || { target_reached=0; break; }
        done
        if (( target_reached )); then return 0; fi
    done
}

function select_target_and_wait
{
    local -r angles="$options_angles"
    local -r pose="$options_pose"
    if [[ -n "$angles" && -n "$pose" ]]; then echo "$name: $FUNCNAME: options --angles and --pose are mutually exclusive" >&2; exit -1; fi
    if [[ -z "$angles" && -z "$pose" ]]; then echo "$name: $FUNCNAME: target is not given, use --angles or --pose to specify the target" >&2; exit -1; fi
    if [[ -n "$angles" ]]; then wait_for_target "arm/angles" "$angles" $number_of_joints $options_timeout; exit $?; fi
    if [[ -n "$pose" ]]; then wait_for_target "tool/pose" "$pose" $number_of_pose_fields $options_timeout; exit $?; fi
}

function wait_for_mode
{
    local expected_mode="$1"
    local expected_joint_modes="$2"
    local end_time="$3"
    while [[ "$( get 'mode' )" != "$expected_mode" || "$( get 'arm/modes' )" != "$expected_joint_modes" ]]; do
        sleep 0.1
        if [[ -z "$end_time" ]]; then continue; fi
        if (( `echo "$( time_ ) > $end_time" | bc -l` )); then echo "$name: $FUNCNAME: timed out waiting for mode $expected_mode and joint modes $expected_joint_modes" >&2; exit -1; fi
    done
}

function turn_on
{
    local -r mode_no_power=$( ur-arm-status --mode-from-name no-power )
    local -r mode_stop=$( ur-arm-status --mode-from-name security-stopped )
    local -r mode_init=$( ur-arm-status --mode-from-name initialising )
    local -r joint_mode_idle=$( ur-arm-status --joint-mode-from-name idle )
    local -r joint_mode_init=$( ur-arm-status --joint-mode-from-name initialisation )
    if [[ -z "$mode_no_power" ]]; then echo "$name: $FUNCNAME: no-power mode undefined, check if 'ur-arm-status --mode-from-name no-power' works" >&2; exit -1; fi
    if [[ -z "$mode_stop" ]]; then echo "$name: $FUNCNAME: stop mode undefined, check if 'ur-arm-status --mode-from-name security-stopped' works" >&2; exit -1; fi
    if [[ -z "$mode_init" ]]; then echo "$name: $FUNCNAME: init mode undefined, check if 'ur-arm-status --mode-from-name initialising' works" >&2; exit -1; fi
    if [[ -z "$joint_mode_idle" ]]; then echo "$name: $FUNCNAME: joint idle mode undefined, check if 'ur-arm-status --joint-mode-from-name idle' works" >&2; exit -1; fi
    if [[ -z "$joint_mode_init" ]]; then echo "$name: $FUNCNAME: joint initialisation mode undefined, check if 'ur-arm-status --joint-mode-from-name initialisation' works" >&2; exit -1; fi
    local mode="$( get 'mode' )"
    if [[ -z "$mode" ]]; then echo "$name: $FUNCNAME: failed to get mode, check if status daemon is publishing on port $publisher_port" >&2; exit -1; fi
    if [[ "$mode" != "$mode_no_power" ]]; then echo "$name: $FUNCNAME: expected the arm to be in mode $mode_no_power (no-power), got mode $mode" >&2; exit -1; fi
    if [[ $( get 'arm/modes' | tr ',' '\n' | wc -l ) != $number_of_joints ]]; then echo "$name: $FUNCNAME: failed to get $number_of_joints joint modes" >&2; exit -1; fi
    local -r timeout=${options_timeout}
    if [[ -n "$timeout" ]]; then
        if (( $( echo "$timeout <= 0" | bc -l ) )); then echo "$name: $FUNCNAME: expected positive timeout, got $timeout" >&2; exit -1; fi
        local -r end_time=$( echo "`time_` + ($timeout)" | bc -l )
    fi

    echo "turning the arm on at $( date +%X.%N ) ..." >&2
    unlock_brakes
    wait_for_mode "$mode_init" "$( replicate $joint_mode_idle $number_of_joints )" "$end_time"
    security_stop
    wait_for_mode "$mode_stop" "$( replicate $joint_mode_idle $number_of_joints )" "$end_time"
    restore
    wait_for_mode "$mode_init" "$( replicate $joint_mode_init $number_of_joints )" "$end_time"
    echo "the arm is on and ready for initialisation at $( date +%X.%N )" >&2
    exit 0
}

function initialise_joint
{
    IFS=,
    local joint="$1"
    local acceleration=( $( name-value-get --from json ${prefix}init/acceleration < $config ) )
    if [[ -z "$acceleration" ]]; then acceleration=$default_acceleration; fi
    local speed=$( name-value-get --from json ${prefix}init/${joint_names[joint]}/speed < $config )
    local time=$( name-value-get --from json ${prefix}init/${joint_names[joint]}/time < $config )
    if [[ -z "$speed" && -z "$time" ]]; then speed=$default_init_speed; time=$default_init_time; fi
    if [[ ! ( -n "$speed" && -n "$time" ) ]]; then echo "$name: $FUNCNAME: expected both init speed and time for joint $joint (${joint_names[joint]})" >&2; exit -1; fi
    if (( $( echo "$time <= 0" | bc -l ) )); then echo "$name: $FUNCNAME: expected positive time, got $time" >&2; exit -1; fi
    local key
    local -i status=0
    local -a speeds=( $zeros )
    speeds[joint]=$speed
    local -i update_movement=1
    local -r start_time=$( time_ )
    local -r end_time=$( echo "`time_` + $time" | bc -l )
    while [[ "$( get 'arm/modes' | cut -d, -f$(( joint+1 )) )" != "$joint_mode_run" ]]; do
        if (( `echo "$( time_ ) > $end_time" | bc -l` )); then status=1; break; fi
        if (( update_movement )); then send_command "speedj_init([${speeds[*]}],$acceleration,$time)"; fi
        read -s -t 0.25 -n 1 key
        case "$key" in
            ' ') speeds[joint]=$( echo "-1*(${speeds[$joint]})" | bc -l ); update_movement=1 ;;
            '+') speeds[joint]=$( echo "1.25*(${speeds[$joint]})" | bc -l ); update_movement=1 ;;
            '-') speeds[joint]=$( echo "0.75*(${speeds[$joint]})" | bc -l ); update_movement=1 ;;
            *) update_movement=0
        esac
    done
    send_command "speedj_init([$zeros],$default_acceleration,$default_time)"
    local final_speed=$( echo ${speeds[joint]} | sed -r 's/^(-?)\./\10\./' )
    local elapsed_time=$( echo "`time_` - ( $start_time )" | bc -l | sed -r 's/^(-?)\./\10\./')
    init_config_values[$joint]="$final_speed,$elapsed_time"
    return $status
}

function output_init_config
{
    local final_speed
    local elapsed_time
    echo "{ \"auto-init\": { "
    for(( joint=0; joint < number_of_joints; joint++ )); do
        if [[ -n "${init_config_values[joint]}" ]]; then IFS=, read final_speed elapsed_time <<< "${init_config_values[joint]}";
        else final_speed=0; elapsed_time=0; fi
        echo -e "    \"${joint_names[joint]}\": { \"speed\": \"$final_speed\", \"time\": \"$elapsed_time\" },"
    done
    echo "\"acceleration\": \"$acceleration\""
    echo "} }"
}

function init
{
    local -r mode_init=$( ur-arm-status --mode-from-name initialising )
    local -r joint_mode_init=$( ur-arm-status --joint-mode-from-name initialisation )
    local -r joint_mode_run=$( ur-arm-status --joint-mode-from-name running )
    if [[ -z "$mode_init" ]]; then echo "$name: $FUNCNAME: init mode undefined, check if 'ur-arm-status --mode-from-name initialising' works" >&2; exit -1; fi
    if [[ -z "$joint_mode_init" ]]; then echo "$name: $FUNCNAME: initialisation mode undefined, check if 'ur-arm-status --joint-mode-from-name initialisation' works" >&2; exit -1; fi
    if [[ -z "$joint_mode_run" ]]; then echo "$name: $FUNCNAME: running mode undefined, check if 'ur-arm-status --joint-mode-from-name running' works" >&2; exit -1; fi
    local mode=$( get 'mode' )
    if [[ "$mode" != "$mode_init" ]]; then echo "$name: $FUNCNAME: expected arm mode $init_mode, got $mode (try using operation 'restore')" >&2; exit -1; fi
    local -a joint_modes=( $( get 'arm/modes' | tr ',' ' ' ) )
    if [[ -z "${joint_modes[@]}" ]]; then echo "$name: $FUNCNAME: failed to get joint modes, check if status daemon is publishing on port $publisher_port" >&2; exit -1; fi
    if (( ${#joint_modes[@]} != number_of_joints )); then echo "$name: $FUNCNAME: failed to get $number_of_joints joint modes" >&2; exit -1; fi
    local -a init_config_values=()
    local -i init_status=0
    echo "initialising the arm at $( date +%X.%N )..." >&2
    for (( joint = number_of_joints - 1; joint >= 0; joint-- )); do
        if [[ "${joint_modes[joint]}" == "$joint_mode_run" ]]; then
            echo "joint $joint (${joint_names[joint]}) is already initialised" >&2
        else
            if [[ "${joint_modes[joint]}" == "$joint_mode_init" ]]; then
                echo -n "initialising joint $joint (${joint_names[joint]}) ... " >&2
                initialise_joint $joint && echo " succeeded" >&2 || { echo " failed" >&2; init_status=1; }
            else echo "$name: $FUNCNAME: expected joint $joint (${joint_names[joint]}) to be in mode $joint_mode_init (init), got ${joint_modes[joint]}" >&2; exit -1; fi
        fi
    done
    if (( init_status == 0 )); then
        echo "the arm is initialised and ready to be used at $( date +%X.%N )" >&2
        output_init_config
    fi
    exit $init_status
}

function stow
{
    local -r angles=$( name-value-get --from json ${prefix}stow/angles < $config )
    local -r speed=$( name-value-get --from json ${prefix}stow/speed < $config )
    if [[ -z "$angles" ]]; then echo "$name: $FUNCNAME: ${prefix}stow/angles is not found in $config" >&2; exit -1; fi
    if [[ -z "$speed" ]]; then echo "$name: $FUNCNAME: ${prefix}stow/speed is not found in $config" >&2; exit -1; fi
    send_command "movej([$angles],a=$default_acceleration,v=$speed)"
    wait_for_target "arm/angles" "$angles" $number_of_joints
}

function set_digital_out
{
    if [[ -z "$options_signal" ]]; then echo "$name: $FUNCNAME: option --signal is not given" >&2; exit -1; fi
    IFS=,
    local -a signal=( $options_signal )
    if (( ${#signal[@]} != 2 )); then echo "$name: $FUNCNAME: expected --signal=<id>,<on/off> but got $options_signal" >&2; exit -1; fi
    local -i id=${signal[0]}
    local switch=$( echo ${signal[1]} | sed 's/on/True/' | sed 's/off/False/' )
    if (( ! ( $switch == "True" || $switch == "False" ) )); then echo "$name: $FUNCNAME: expected the switch in --signal=<id>,<switch> to be 'on' or 'off', e.g. --signal=0,on but got ${signal[1]}" >&2; exit -1; fi
    send_command "set_digital_out($id,$switch)"
}


if (( `comma_options_has --help "$@"` || `comma_options_has -h "$@"` )) ; then
    if (( `comma_options_has --verbose "$@"` || `comma_options_has -v "$@"` )) ; then
        usage verbose
    else
        usage
    fi
fi
declare -r allowed_operations=$( operation_description | cut -d';' -f1 | tr '\n' ' ' )
declare -r operation="$1"
comma_path_value_to_var --prefix=options < <( option_description | comma-options-to-name-value "$@" )

if (( `comma_options_has "$operation" "$allowed_operations"` )); then
    shift
else
    if [[ -z "$operation" ]]; then usage; fi
    echo "$name: expected operation (e.g. ${allowed_operations// /, }), got \"$operation\"" >&2
    exit 1
fi

declare -r config=${options_config%:*}
if [[ -z "$config" ]]; then echo "$name: config file is not given" >&2; exit 1; fi
if [[ ! -f "$config" ]]; then echo "$name: config file not found" >&2; exit 1; fi

[[ "$options_config" =~ ":" && -n "${options_config#*:}" ]] && config_bound_prefix="${options_config#*:}"
[[ -n "${options_prefix}" ]] && stand_alone_prefix="$options_prefix"
if [[ -n "$config_bound_prefix" && -n "$stand_alone_prefix" ]]; then echo "$name: expected either \"--config=<config:prefix>\" or \"--config=<config> --prefix=<prefix>\", got both" >&2; exit 1; fi
prefix=""
[[ -n "$config_bound_prefix" ]] && prefix="$config_bound_prefix/"
[[ -n "$stand_alone_prefix" ]] && prefix="$stand_alone_prefix/"

declare -r publisher_address="$( name-value-get --from json ${prefix}publisher/data/address < $config )"
declare -r publisher_port="$( name-value-get --from json ${prefix}publisher/data/port < $config )"
declare -r command_address="$( name-value-get --from json ${prefix}command/address < $config )"
declare -r command_port="$( name-value-get --from json ${prefix}command/port < $config )"

if [[ -z "$publisher_address" ]]; then echo "$name: ${prefix}publisher/data/address is not found in $config" >&2; exit 1; fi
if [[ -z "$publisher_port" ]]; then echo "$name: ${prefix}publisher/data/port is not found in $config" >&2; exit 1; fi
if [[ -z "$command_address" ]]; then echo "$name: ${prefix}command/address is not found in $config" >&2; exit 1; fi
if [[ -z "$command_port" ]]; then echo "$name: ${prefix}command/port is not found in $config" >&2; exit 1; fi

trap 'security_stop; stty echo echok; exit 1' SIGINT SIGTERM SIGHUP

case "$operation" in
on)
   turn_on
   ;;
off)
   turn_off
   ;;
init)
   init
   ;;
stow)
   stow
   ;;
security-stop)
   security_stop
   ;;
free)
   freedrive
   ;;
unlock-brakes)
   unlock_brakes
   ;;
restore)
   restore
   ;;
stop)
   stop_movement
   ;;
wait)
   select_target_and_wait
   ;;
io)
    set_digital_out
    ;;
esac
