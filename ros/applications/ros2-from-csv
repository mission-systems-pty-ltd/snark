#!/usr/bin/env python3

import argparse
import importlib
import sys
from signal import signal, SIGPIPE, SIG_IGN

import rclpy
import comma.csv
import comma.application
from snark.ros2 import convert, detail

help_description = """
Take CSV records on stdin, publish on a given ROS topic

TODO: fix binary (currently only ascii mode works)

TODO: load message type from .msg file
"""

help_examples = """
Examples:
    Forward ROS messages (e.g., to illustrate the principle or debug), start with trying --dry-run
        Forward with buffering:
            ros-to-csv --topic some-topic | ros-from-csv --topic some-topic
        Forward without buffering:
            ros-to-csv --topic some-topic | ros-from-csv --topic some-topic --flush
        Print to stdout:
            ros-to-csv --topic some-topic | ros-from-csv --topic some-topic --flush --dry-run

    Using message types offline, try it:
        Imply package from message type:
            echo 1,2,3 | ros-from-csv --type geometry_msgs.msg.Point --format 3f --dry
        Explicitly specify package with message type definition:
            echo 1,2,3 | ros-from-csv --import geometry_msgs.msg --type geometry_msgs.msg.Point --format 3f --dry
"""

def main():
    parser = argparse.ArgumentParser(description=help_description, epilog=help_examples, formatter_class=argparse.RawDescriptionHelpFormatter, conflict_handler='resolve')
    parser.add_argument('--index-output-fields', help='Output array fields with indices, e.g., output "array[0],array[1],array[2]", not "array"', action='store_true')
    parser.add_argument('--message-type', '--type', help='Message type, useful for debugging', type=str)
    parser.add_argument('--output-fields', help='Output input CSV fields and exit', action='store_true')
    parser.add_argument('--output-format', help='Output format for input fields and exit', action='store_true')
    parser.add_argument('--package', '--import', help='If --type specified, package to import', type=str)
    parser.add_argument('--topic', nargs='?', help='Topic', type=str)
    parser.add_argument('--verbose', '-v', help='Chat more', action='store_true')
    comma.csv.add_options(parser)
    comma.application.remove_argparse_options(parser, ['-b', '--binary', '--format'])
    group_fmt = parser.add_mutually_exclusive_group()
    group_fmt.add_argument('--format', help='In ASCII mode, format hint string containing the types of the input CSV data', type=str)
    group_fmt.add_argument('-b', '--binary', help='In binary mode, format string containing the types of the input CSV data', type=str)
    group_dry = parser.add_mutually_exclusive_group()
    group_dry.add_argument('--dry-run', '--dry', help='Output messages to stdout, do not send to topic', action='store_true')
    group_dry.add_argument('--ros-queue-size', '--ros-queue', '--queue-size', '--queue', metavar='NUM', default=1, help='Length of ROS publisher queue', type=int)
    args = parser.parse_args()
    signal(SIGPIPE, SIG_IGN) # Do not want the IOError message trace

    if args.dry_run:
        import numpy
        numpy.set_printoptions(linewidth=numpy.inf, threshold=numpy.inf, precision=args.precision and args.precision or numpy.get_printoptions()['precision'])
    
    if args.topic is None and not args.dry_run and args.message_type is None:
        print("ros-from-csv: please specify --topic", file=sys.stderr)
        sys.exit(1)
    
    rclpy.init()  # Initialize ROS2 client library
    node = rclpy.create_node('ros_from_csv')

    if args.message_type is None:
        print("ros-from-csv: message type not specified", file=sys.stderr)
        sys.exit(1)
        # For ROS2, use a mechanism to resolve message types
        message_type = None  # Replace with actual message type lookup if possible
    else:
        package_str = args.package if args.package else '.'.join(args.message_type.split('.')[:-1])
        module = importlib.import_module(package_str)
        message_type = getattr(module, args.message_type.split('.')[-1])
    
    message = message_type()
    record_type, record_ctor = convert.ros_message_to_csv_record(message_type())

    if args.format or args.binary:
        formats = args.format if args.format else args.binary
        fields = args.fields if args.fields else detail.command_line.fields_of_record(record_type, args.index_output_fields)
        lengths = detail.command_line.lengths_of_strings(fields, comma.csv.format.expand(formats))
        record_type, record_ctor = convert.ros_message_to_csv_record(message_type(), lengths)
    
    if args.output_fields:
        print(','.join(detail.command_line.fields_of_record(record_type, args.index_output_fields)))
        sys.exit(0)
    
    if args.output_format:
        print(','.join([comma.csv.format.from_numpy(f) for f in record_type.format.split(',')]))
        sys.exit(0)
    
    format = ','.join(comma.csv.format.to_numpy(args.binary and args.binary or args.format, compress=True))
    binary = not not args.binary
    istream = comma.csv.stream(record_type, delimiter=args.delimiter, fields=args.fields, format=format, binary=binary, default_values=None, flush=args.flush)
    assign = record_type.assign(message, convert.from_csv_supported_types)
    
    if args.dry_run:
        if args.verbose:
            print("ros-from-csv: dry run, printing messages to stdout", file=sys.stderr)
    else:
        publisher = node.create_publisher(message_type, args.topic, qos_profile=rclpy.qos.QoSProfile(depth=args.ros_queue_size))
        if args.verbose:
            print("ros-from-csv: publishing to topic '%s'..." % args.topic, file=sys.stderr)
    
    for records in istream:
        for record in records:
            assign(record)
            if args.dry_run:
                print(message)
            else:
                publisher.publish(message)

if __name__ == '__main__':
    main()
