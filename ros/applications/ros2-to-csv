#!/usr/bin/env python3

import argparse
import datetime
import numpy
import sys
from signal import signal, SIGPIPE, SIG_DFL

import rclpy
import comma.csv
import comma.application
from snark.ros2 import convert, detail

try:
    import rclpy_message_converter
except ImportError:
    msg = """
Cannot import rclpy_message_converter module; usually you can install it as
    sudo apt-get install ros-humble-rclpy-message-converter
(use your ROS distro name in place of humble). If the module is not available
in your package manager, build and install the module manually.
"""
    raise ImportError(msg)

help_description = "Output ROS messages on a given topic (todo) or ROS bag files of arbitrary content as CSV streams"
help_examples = """
Examples:
    ROS bag to CSV
        ros2-to-csv --bag input.bag
        ros2-to-csv --bag input.bag --topic /mavros/global_position/raw/fix
        ros2-to-csv --bag input.bag --topic /mavros/global_position/raw/fix --output-format
        ros2-to-csv --bag input.bag --topic /mavros/global_position/raw/fix --output-fields
        ros2-to-csv --bag input.bag --topic /mavros/global_position/raw/fix --binary=guess | csv-from-bin ui,t,s[3],b,uw,12d,ub
        ros2-to-csv --bag input.bag --topic /mavros/global_position/raw/fix --binary=ui,t,s[5],b,uw,12d,ub | csv-from-bin ui,t,s[5],b,uw,12d,ub
        ros2-to-csv --bag a.bag b.bag c.bag --topic /mavros/global_position/raw/fix

General ROS bag hints:
    Get list of topics inside a bag:
        ros2 bag info <bag>
    Get info about a topic:
        ros2 topic echo <topic> --bag <file> | less -S
        ros2 topic echo /mavros/global_position/global --bag input.bag | head -n 32
"""

class MessageHandler:
    """Create a CSV output stream from a sample message, write messages to it"""

    def __init__(self, msg, args):
        self.record_type, self.record_ctor = convert.ros_message_to_csv_record(msg)
        self.output_format = ''
        if args.output_fields:
            print(','.join(detail.command_line.fields_of_record(self.record_type, args.index_output_fields)))
            sys.exit(0)
        if args.binary:
            if args.binary == "guess":
                self.output_format = self._output_format()
                if args.verbose:
                    print("ros2-to-csv: set the binary format to '%s'" % self.output_format, file=sys.stderr)
            else:
                lengths = self._set_lengths_from_format(args)
                self.record_type, self.record_ctor = convert.ros_message_to_csv_record(msg, lengths)
                self.output_format = self._output_format()
        if args.output_format:
            if not self.output_format:
                self.output_format = self._output_format()
            print(self.output_format)
            sys.exit(0)
        self.flush = args.flush
        self.binary = not not self.output_format
        self.ostream = comma.csv.stream(self.record_type, flush=args.flush, delimiter=args.delimiter, binary=self.binary, fields=args.fields)

    def write(self, msg):
        self.ostream.write(self.record_ctor(msg))
        if self.flush:
            sys.stdout.flush()

    def _output_format(self):
        return ','.join([comma.csv.format.from_numpy(f) for f in self.record_type.format.split(',')])

    def _set_lengths_from_format(self, args):
        fields = args.fields and args.fields or self.record_type.fields
        return detail.command_line.lengths_of_strings(fields, args.binary)

class TopicSubscriber:
    """Subscribe to a topic, output messages as CSV in callback"""

    def __init__(self, args):
        rclpy.init()
        self.node = rclpy.create_node('listener')
        self.args = args
        self.subscription = self.node.create_subscription(
            rclpy_message_converter.convert_to_message_type(args.topic),
            args.topic,
            self.callback,
            10
        )
        self.handler = MessageHandler(rclpy_message_converter.convert_to_message_type(args.topic)(), self.args)

    def callback(self, msg):
        self.handler.write(msg)

def main():
    parser = argparse.ArgumentParser(description=help_description, epilog=help_examples, formatter_class=argparse.RawDescriptionHelpFormatter, conflict_handler='resolve')
    parser.add_argument('--bag', help='Input bag file', type=str, nargs='*')
    parser.add_argument('--flush', help='Flush stdout after each message', action='store_true')
    parser.add_argument('--index-output-fields', '--index-fields', '--index', help='Output array fields with indices, e.g., output "array[0],array[1],array[2]", not "array"', action='store_true')
    parser.add_argument('--output-fields', help='Print output fields and exit', action='store_true')
    parser.add_argument('--output-format', '--output-types', help='Print output format for binary and exit', action='store_true')
    parser.add_argument('--topic', nargs='?', help='Topic', type=str)
    parser.add_argument('-v', '--verbose', help='Chat more', action='store_true')
    comma.csv.add_options(parser)
    parser.add_argument('-b', '--binary', help='Produce binary output in the given format; if argument is "guess", figure out format from the message itself', type=str)
    args = parser.parse_args()

    if args.bag is None:
        if args.topic is None:
            print("ros2-to-csv: please specify --topic", file=sys.stderr)
            sys.exit(1)
        if args.verbose:
            print("ros2-to-csv: listening to topic '%s'..." % args.topic, file=sys.stderr)
        subscriber = TopicSubscriber(args)
        rclpy.spin(subscriber.node)
    else:
        print("Reading bag files are not implemented yet", file=sys.stderr)
        sys.exit(1)

    sys.exit(0)

if __name__ == '__main__':
    main()
