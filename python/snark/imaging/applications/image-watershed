#!/usr/bin/env python3

# This file is part of snark, a generic and flexible library
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import sys
import cv2 as cv
import numpy as np
import argparse
import json
from snark.imaging import cv_image
from comma.io import windows_binary

description = """

apply watershed algorithm to image stream

pixel labels will be output as single-channel 32-bit integer image (type CV_32SC1)
of the same size as the original

see cv-cat --help --verbose for input and output format details

usage
    read images from image stream; see cv-cat --help --verbose for image format details
        cat images.bin | image-watershed [<options>] > labels.bin
       
    read image from file
        cv-cat --file image.jpg | image-watershed [<options>] | cv-cat --output no-header > labels.bin

    read image from file and save results in new file
        cv-cat --file image.jpg | image-watershed [<options>] | cv-cat --output no-header "convert-to=ub;encode=jpg" > results.jpg

"""

parser = argparse.ArgumentParser( description = description, formatter_class = argparse.RawTextHelpFormatter )
parser.add_argument( '--view', action="store_true", help = 'view result' )
parser.add_argument( '--config', action="store", help = 'configuration file name' )
parser.add_argument( '--default-config', action="store_true", help = 'output default config and exit' )
args = parser.parse_args()

# set defaults
default_config = dict()
default_config['threshold'] = dict()
default_config['threshold']['min'] = 200
default_config['threshold']['max'] = 255
default_config['blur'] = dict()
default_config['blur']['radius'] = 5
default_config['blur']['iterations'] = 2
default_config['dilation'] = dict()
default_config['dilation']['iterations'] = 3

if( args.default_config ):
    print json.dumps( default_config )
    exit(0)

view_resize_factor = 0.25

# override defaults in config
config = default_config
if args.config:
    with open( args.config ) as config_file:
        loaded_config = json.load( config_file )
        config.update( loaded_config )

for i in cv_image.iterator( sys.stdin ):
    header = i.header
    type = i.header['type']
    header['type'] = cv.CV_32SC1
    watershed = np.zeros( ( header['rows'], header['cols'], 1 ), np.int32 )

    ret, thresholded = cv.threshold( i.data, float( config['threshold']['min'] ), float( config['threshold']['max'] ), cv.THRESH_BINARY )

    if( type != cv.CV_8UC1 ):
        thresholded = cv.cvtColor( thresholded, cv.COLOR_BGR2GRAY )

    kernel = np.ones( ( float( config['blur']['radius'] ), float( config['blur']['radius'] ) ), np.uint8 )
    blurred = cv.morphologyEx( thresholded, cv.MORPH_OPEN,kernel, iterations = int( config['blur']['iterations'] ) )

    dilated = cv.dilate( blurred, kernel, iterations = int( config['dilation']['iterations'] ) )

    contours, hierarchy = cv.findContours( dilated, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE )

    for j in range( len( contours ) ):
        for k in range( len( contours[j] ) ):
            u = contours[j][k][0][0]
            v = contours[j][k][0][1]
            watershed[v][u] = j

    w = cv_image.image( header, watershed )
    if args.view :
        resized = cv.resize( w.data, None, fx=view_resize_factor, fy=view_resize_factor, interpolation = cv.INTER_NEAREST )
        cv.imshow( 'watershed', resized )
        cv.waitKey(10000)
    cv_image.write( w )
