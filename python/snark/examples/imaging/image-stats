#!/usr/bin/env python3

import sys
import cv2
import numpy
import argparse
import operator
from snark.imaging import cv
from comma.io import windows_binary

description="""
output the header and append specified statistical properties of each image in the input stream
"""
epilog="""
examples:
    cat ladybug.bin | {script_name} amin,amax,mean,median,std,var,ptp
    cat ladybug.bin | {script_name} mean --binary
    {script_name} mean --output-format

operations:
    see http://docs.scipy.org/doc/numpy/reference/routines.statistics.html
""".format( script_name=sys.argv[0].split('/')[-1] )

parser = argparse.ArgumentParser( description=description, epilog=epilog, formatter_class=argparse.RawDescriptionHelpFormatter )
parser.add_argument( "operations", help="comma-separated list of operations" )
parser.add_argument( "--binary", action="store_true", help="binary output" )
parser.add_argument( "--output-format", action="store_true", help="output binary format to stdout and exit" )
args = parser.parse_args()

operations = [ getattr( numpy, operation ) for operation in args.operations.split(',') ]
header_format = 'u8,u4,u4,u4'
properties_format = ','.join( ['f8'] * len( operations ) )
output_format = header_format + ',' + properties_format

if args.output_format:
    comma_binary_format_from_numpy = dict( u8='t', u4='ui', f8='d' ) # assuming u8 represents time
    print ','.join( comma_binary_format_from_numpy[ item ] for item in output_format.split(',') )
    sys.exit( 0 )

for i in cv.iterator( sys.stdin ):
    output = operator.itemgetter( 'rows', 'cols', 'type' )( i.header ) + tuple( operation( i.data ) for operation in operations )
    if args.binary:
        time = i.header['time'].astype( 'u8' )
        numpy.array( (time,) + output, dtype=output_format ).tofile( sys.stdout )
        sys.stdout.flush()
    else:
        time = i.header['time'].item().isoformat().replace('-','').replace(':','')
        print >> sys.stdout, ','.join( map( str, (time,) + output ) )
