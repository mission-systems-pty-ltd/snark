#!/usr/bin/env python3

# This file is part of snark, a generic and flexible library for robotics research
# Copyright (c) 2011 The University of Sydney
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University of Sydney nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE
# GRANTED BY THIS LICENSE.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
# HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

__author__ = 'suchet bargoti'

import sys
import signal
import argparse
import datetime

def import_advice( module ):
    debian_pkg = {
        "numpy": "python-numpy",
        "Pysolar": "python-pysolar"
        }
    preamble = "Install"
    if debian_pkg.has_key( module ):
        print "On debian/ubuntu install with \"apt-get install %s\"" % debian_pkg[ module ]
        preamble = "On other systems install"
    print "%s with \"pip install %s\"" % ( preamble, module )

try:
    import numpy as np
    import Pysolar
except ImportError as e:
    print "ImportError:", e
    module = e.args[0].split(' ')[-1]
    import_advice( module )
    sys.exit( 1 )

try:
    import comma.csv
except ImportError:
    print "ImportError: No module named comma.csv"
    print "Enable BUILD_PYTHON_PACKAGES in comma"
    sys.exit( 1 )


def message( msg ):
    sys.stderr.write ( "geo-sun-position: %s\n" % msg )


def datetime_to_datetime( datetime ):
    """
    Convert log time string to np.datetime format
    """
    return np.datetime64( datetime, 'us' )

def lat_long_to_elaz( latitude, longitude, utc_datetime ):
    """
    Obtain the sun position using latitude, longitude and time
    :param latitude: in degrees
    :param longitude: in degrees
    :param utc_datetime: in datetime.datetime format
    :return: azimuth and elevation of the sun

    Notes:
    ------------
    Azimuth and elevation is calculated according to the Pysolar library.
    Documentation: http://docs.pysolar.org/en/latest/
    The authors measure positive azimuth as estimates east of south. This is converted instead to positive estimates
    measured EAST from NORTH instead.
    """

    # Calculate azimuth
    south_azimuth = Pysolar.GetAzimuth( latitude, longitude, utc_datetime=utc_datetime )
    # Reorient azimuth so that positive measures East from North
    azimuth = 180 - ( south_azimuth + 360 ) % 360

    # Calculate elevation
    elevation = Pysolar.GetAltitude( latitude, longitude, utc_datetime=utc_datetime )

    return elevation, azimuth

def spherical_to_cartesian( spherical_vect ):
    """Convert the spherical coordinate vector [r, theta, phi] to the Cartesian vector [x, y, z].

    The parameter r is the radial distance, theta is the polar angle, and phi is the azimuth.


    @param spherical_vect:  The spherical coordinate vector [r, theta, phi].
    @type spherical_vect:   3D array or list
    @param cart_vect:       The Cartesian vector [x, y, z].
    @type cart_vect:        3D array or list
    """

    # Trig alias.
    sin_theta = np.sin( spherical_vect[:, 1] )

    # The vector.
    cart_vect = np.ones( spherical_vect.shape )
    cart_vect[:, 0] = spherical_vect[:, 0] * np.cos( spherical_vect[:, 2] ) * sin_theta
    cart_vect[:, 1] = spherical_vect[:, 0] * np.sin( spherical_vect[:, 2] ) * sin_theta
    cart_vect[:, 2] = spherical_vect[:, 0] * np.cos( spherical_vect[:, 1] )

    return cart_vect

def angle2dcm( yaw, pitch, roll, input_units='rad', rotation_sequence='321' ):
    """
    Returns a transformation matrix (aka direction cosine matrix or DCM) which
    transforms from navigation to body frame.  Other names commonly used,
    besides DCM, are `Cbody2nav` or `Rbody2nav`.  The rotation sequence
    specifies the order of rotations when going from navigation-frame to
    body-frame.  The default is '321' (i.e Yaw -> Pitch -> Roll).

    Parameters
    ----------
    yaw   : yaw angle, units of input_units.
    pitch : pitch angle, units of input_units.
    roll  : roll angle , units of input_units.
    input_units: units for input angles {'rad', 'deg'}, optional.
    rotationSequence: assumed rotation sequence {'321', others can be
                                                implemented in the future}.

    Returns
    -------
    Rnav2body: 3x3 transformation matrix (numpy matrix data type).  This can be
               used to convert from navigation-frame (e.g NED) to body frame.

    Notes
    -----
    Since Rnav2body is a proper transformation matrix, the inverse
    transformation is simply the transpose.  Hence, to go from body->nav,
    simply use: Rbody2nav = Rnav2body.T

    Examples:
    ---------
    >>> import numpy as np
    >>> from nav import angle2dcm
    >>> g_ned = np.matrix([[0, 0, 9.8]]).T # gravity vector in NED frame
    >>> yaw, pitch, roll = np.deg2rad([90, 15, 0]) # vehicle orientation
    >>> g_body = Rnav2body * g_ned
    >>> g_body
    matrix([[-2.53642664],
            [ 0.        ],
            [ 9.4660731 ]])

    >>> g_ned_check = Rnav2body.T * g_body
    >>> np.linalg.norm(g_ned_check - g_ned) < 1e-10 # should match g_ned
    True

    Reference
    ---------
    [1] Equation 2.4, Aided Navigation: GPS with High Rate Sensors, Jay A. Farrel 2008
    [2] eul2Cbn.m function (note, this function gives body->nav) at:
    http://www.gnssapplications.org/downloads/chapter7/Chapter7_GNSS_INS_Functions.tar.gz
    """
    # Apply necessary unit transformations.
    if input_units == 'rad':
        pass
    elif input_units == 'deg':
        yaw, pitch, roll = np.radians( [yaw, pitch, roll] )

    # Build transformation matrix Rnav2body.
    s_r, c_r = np.sin( roll ) , np.cos( roll )
    s_p, c_p = np.sin( pitch ), np.cos( pitch )
    s_y, c_y = np.sin( yaw )  , np.cos( yaw )

    if rotation_sequence == '321':
        # This is equivalent to Rnav2body = R(roll) * R(pitch) * R(yaw)
        # where R() is the single axis rotation matrix.  We implement
        # the expanded form for improved efficiency.
        Rnav2body = np.matrix([
                [c_y*c_p               ,  s_y*c_p              , -s_p    ],
                [-s_y*c_r + c_y*s_p*s_r,  c_y*c_r + s_y*s_p*s_r,  c_p*s_r],
                [ s_y*s_r + c_y*s_p*c_r, -c_y*s_r + s_y*s_p*c_r,  c_p*c_r]
                ])

    else:
        # No other rotation sequence is currently implemented
        message( 'WARNING (angle2dcm): requested rotation_sequence is unavailable - NaN returned.' )
        Rnav2body = np.nan

    return Rnav2body

def cartesian_to_spherical( cart_array ):
    """Convert the Cartesian vector [x, y, z] to spherical coordinates [r, theta, phi].

    The parameter r is the radial distance, theta is the polar angle, and phi is the azimuth.


    @param vector:  The Cartesian vector [x, y, z].
    @type vector:   numpy rank-1, 3D array
    @return:        The spherical coordinate vector [r, theta, phi].
    @rtype:         numpy rank-1, 3D array
    """

    # The radial distance.
    r = np.linalg.norm( cart_array, axis=1 )

    # Unit vector.
    unit = cart_array / r[..., None]

    # The polar angle.
    theta = np.arccos( unit[:, 2] )

    # The azimuth.
    phi = np.arctan2( unit[:,1], unit[:,0] )

    # Return the spherical coordinate vector.
    return np.array( [r, theta, phi], np.float64 ).T


def convert_to_body( elevation, azimuth, roll, pitch, yaw ):
    # Convert to cartesian co-ordinates
    sunpos_NED_cart = spherical_to_cartesian( np.array( [1., np.radians( elevation ), np.radians( azimuth )])[None, ...] )

    # Transform to body frame
    RMat = angle2dcm( yaw, pitch, roll, input_units='rad', rotation_sequence='321' )
    sunpos_BODY_cart = np.dot( RMat, sunpos_NED_cart.T )

    # Get azimuth and elevation relative to body frame
    r, elevation_BODY, azimuth_BODY = cartesian_to_spherical( sunpos_BODY_cart.T )[0]

    # Convert to degrees
    elevation_BODY = np.degrees( elevation_BODY )
    azimuth_BODY = np.degrees( azimuth_BODY )

    return elevation_BODY, azimuth_BODY


def sun_position( record, output ):
    """
    Read stdin and evaluate the sun position - output to stdout
    sys.stdin needs to be csv data containing log time, latitude and longitude
    if sys.stdin also contains 3 more entries - roll, pitch, yaw, this function will also output the relative position of the sun from the vehicle
    :return: stdout output
    """

    # Evaluate the sun position
    output['elevation'], output['azimuth'] = lat_long_to_elaz( record['latitude'],
                                                               record['longitude'],
                                                               record['time'].astype( datetime.datetime ))

    # Evaluate the relative position of the sun if vehicle position is given
    try:
        params = ( output['elevation'], output['azimuth'], record['roll'], record['pitch'], record['yaw'] )
    except StandardError:  # different versions of numpy throw different exceptions (bugs?), so catching standard error here
        # expected if there are no roll, pitch and yaw fields
        params = None
    if params:
        output['body_elevation'], output['body_azimuth'] = convert_to_body( *params )


# ------------------------------------------------------------
# Field handling

REQUIRED_FIELDS = ( 'time', 'latitude' ,'longitude' )
OPTIONAL_FIELDS = ( 'roll', 'pitch', 'yaw' )


def fields_to_format( field_names ):
    formats = {
        'time': 't',
        'latitude': 'd',
        'longitude': 'd',
        'roll': 'd',
        'pitch': 'd',
        'yaw': 'd',
        'elevation': 'd',
        'azimuth': 'd',
        'body_elevation': 'd',
        'body_azimuth': 'd',
    }
    return [ formats.get( f, 's[0]' ) for f in field_names ]


def output_fields( input_fields ):
    fields = []
    if set( REQUIRED_FIELDS ).issubset( input_fields ):
        fields += [ 'azimuth', 'elevation' ]
    if set( OPTIONAL_FIELDS ).issubset( input_fields ):
        fields += [ 'body_azimuth', 'body_elevation' ]
    return fields


class stream:
    def __init__( self, args ):
        self.args = args
        self.csv_options = dict( full_xpath=False,
                                 flush=self.args.flush,
                                 delimiter=self.args.delimiter,
                                 precision=self.args.precision )
        self.initialize_input()
        self.initialize_output()

    def initialize_input( self ):
        field_list = self.args.fields.split(',')
        if not set( REQUIRED_FIELDS ).issubset( field_list ):
            raise RuntimeError( "%s fields are required" % ','.join( REQUIRED_FIELDS ))
        format = self.args.binary if self.args.binary else ','.join( fields_to_format( field_list ))
        types = comma.csv.format.to_numpy( format )
        input_t = comma.csv.struct( self.args.fields, *types )
        self.input = comma.csv.stream( input_t, binary=bool( self.args.binary ), **self.csv_options )

    def initialize_output( self ):
        field_list = output_fields( self.input.fields )
        types = comma.csv.format.to_numpy( ','.join( fields_to_format( field_list )))
        output_t = comma.csv.struct( ','.join( field_list ), *types )
        self.output = comma.csv.stream( output_t,
                                        binary=bool( self.args.binary ),
                                        tied=self.input,
                                        **self.csv_options )


def bash_completion (parser):
    print " ".join(
        [ o for o in parser._option_string_actions.keys()
          if o != "--bash-completion" ])


def parse_args():
    description="""
evaluate sun position and append to input csv stream
"""

    epilog="""
Supported input fields are:

time,latitude,longitude

    Append the sun azimuth and elevation to the input stream.

time,latitude,longitude,roll,pitch,yaw

    Also append the azimuth and elevation relative to the vehicle body as
    defined by the roll, pitch and yaw.

Field names can occur in any order and can be interspersed with other fields.

examples:
    echo 20150621T120000.123456,23.44,0 | {script_name}
    echo 20150621T120000.123456,23.44,0,10,10,10 | {script_name} --fields time,latitude,longitude,roll,pitch,yaw

    echo label,time,longitude,latitude | {script_name} --output-fields
""".format( script_name=sys.argv[0].split('/')[-1] )

    fmt=lambda prog: argparse.RawDescriptionHelpFormatter( prog, max_help_position=50 )

    parser = argparse.ArgumentParser( description=description,
                                      epilog=epilog,
                                      formatter_class=fmt )

    parser.add_argument( "--format", metavar="<types>",
                         help='''format of input stream:
                         only required for --output-format with non-default input''' )

    parser.add_argument ("--input-fields", action="store_true",
                         help="list of possible input fields")

    parser.add_argument ("--output-fields", action="store_true",
                         help="list of the output fields for a given input")

    parser.add_argument ("--output-format", action="store_true",
                         help="list of the output types for a given input")

    comma.csv.add_options( parser, { 'fields': 'time,latitude,longitude' } )

    parser.add_argument( '--bash-completion', action='store_true', help=argparse.SUPPRESS )

    args = parser.parse_args()

    if args.bash_completion:
        bash_completion( parser )
        sys.exit( 0 )

    return args


def main():
    # Reset SIGPIPE and SIGINT to their default OS behaviour.
    # This stops python dumping a stack-trace on ctrl-c or broken pipe.
    signal.signal( signal.SIGPIPE, signal.SIG_DFL )
    s = signal.signal( signal.SIGINT, signal.SIG_DFL )
    # but don't reset SIGINT if it's been assigned to something other
    # than the Python default
    if s != signal.default_int_handler:
        signal.signal( signal.SIGINT, s )

    args = parse_args()

    if args.input_fields:
        print "\n".join ( REQUIRED_FIELDS + OPTIONAL_FIELDS )
        sys.exit( 0 )

    if args.output_fields:
        input_fields = args.fields.split(',')
        print ','.join([ f.replace('_','/') for f in input_fields + output_fields( input_fields )])
        sys.exit( 0 )

    if args.output_format:
        input_fields = args.fields.split(',')
        if args.format:
            input_format = args.format.split(',')
        elif args.binary:
            input_format = args.binary.split(',')
        else:
            input_format = fields_to_format( input_fields )
        print ','.join( input_format + fields_to_format( output_fields( input_fields )))
        sys.exit( 0 )

    comma.csv.time.zone( 'UTC' )

    try:
        s = stream( args )
        for records in s.input.iter():
            output = np.empty( records.size, dtype=s.output.struct )
            for i, record in enumerate( records ):
                sun_position( record, output[i] )
            s.output.write( output )
    except RuntimeError as e:
        message( "Error: %s" % e )


if __name__ == '__main__':
    main()
