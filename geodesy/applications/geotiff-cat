#!/usr/bin/env python3

import argparse, numpy, sys

gdal_installation = '''

gdal not found; install it as following

sudo apt install --yes gdal-bin libgdal-dev python3-gdal

if it does not work, see https://gdal.org/ for installation instructions

'''

def _open( args ):
    g = gdal.Open( args.geotiff_filename )
    assert g is not None, RuntimeError( f'file does not exist or is not a valid geotiff: {args.geotiff_filename}' )
    return g

def _to_pixels( g, coordinates ):
    t = g.GetGeoTransform()
    translation = numpy.array( [ t[0], t[3] ], dtype=numpy.float64 )
    transform = numpy.array( [ [ t[1], t[2] ], [ t[4], t[5] ] ], dtype=numpy.float64 )
    return numpy.linalg.inv( transform ) @ ( coordinates - translation ).T

def _shape( args, g ):
    assert args.channel <= g.RasterCount, f'expected raster band between 1 and {g.RasterCount}; got: {args.channel}'
    if args.as_coordinates:
        begin = numpy.array( [ float( s ) for s in args.origin.split( ',' ) ] )
        end = begin + numpy.array( [ float( s ) for s in args.size[0].split( ',' ) ] )
        pbegin = numpy.round( _to_pixels( g, begin ) ).astype( int )
        pend = numpy.round( _to_pixels( g, end ) ).astype( int )
        x, y = int( min( pbegin[0], pend[0] ) ), int( min( pbegin[1], pend[1] ) )
        ex, ey = int( max( pbegin[0], pend[0] ) ), int( max( pbegin[1], pend[1] ) )
        width, height = ex - x, ey - y
    else:
        x, y = [ int( s ) for s in args.origin.split( ',' ) ]
        width, height = [ int( s ) for s in args.size[0].split( ',' ) ]
    if not args.dry_run:
        assert x >= 0, f'x >= 0; got: x: {x}'
        assert y >= 0, f'x >= 0; got: y: {y}'
        assert x + width <= g.RasterXSize, f'expected x + width < {g.RasterXSize}; got: x: {x} width: {width}'
        assert y + height <= g.RasterYSize, f'expected y + height < {g.RasterYSize}; got: y: {y} height: {height}'
    return x, y, width, height
    
def _raster( args, g ):
    b = g.GetRasterBand( args.channel )
    return b.ReadAsArray( *_shape( args, g ) )

def convert( args ):
    g = _open( args )
    t = g.GetGeoTransform()
    translation = numpy.array( [ t[0], t[3] ], dtype=numpy.float64 )
    transform = numpy.array( [ [ t[1], t[2] ], [ t[4], t[5] ] ], dtype=numpy.float64 )
    transform_i = numpy.linalg.inv( transform )
    to_pixels = args.to == 'pixels'
    while True: # todo: quick and dirty; implement as a proper comma.csv.stream
        line = sys.stdin.readline()
        if len( line ) == 0: break;
        a = numpy.array( [ float( s ) for s in line.strip().split( ',' ) ], dtype=float );
        b = ( transform_i @ ( a - translation ).T if to_pixels else transform @ a.T + translation ).T
        if to_pixels and not args.no_rounding: b = [ int( numpy.round( b[0] ) ), int( numpy.round( b[1] ) ) ] # quick and dirty for now
        print( f'{b[0]},{b[1]}' if args.no_append else f'{a[0]},{a[1]},{b[0]},{b[1]}' )
    
def points( args ):
    assert args.binary is None or args.binary == '2ui,3d', 'only --binary=2ui,3d is currently supported'
    g = _open( args )
    r = _raster( args, g )
    t = g.GetGeoTransform()
    translation = numpy.array( [ t[0], t[3] ], dtype=numpy.float64 )
    transform = numpy.array( [ [ t[1], t[2] ], [ t[4], t[5] ] ], dtype=numpy.float64 )
    x, y, width, height = _shape( args, g )
    indices = numpy.indices( r.shape, dtype=numpy.int32 ).T.reshape( ( r.shape[0] * r.shape[1], 2 ) ) + numpy.array( [ x, y ], dtype=numpy.int32 )
    a = numpy.zeros( r.shape[0] * r.shape[1], dtype=numpy.dtype([('index', '2i'),('coordinates', '2f8'), ('value', 'f8')] ) )
    a['index'] = indices
    a['coordinates'] = ( transform @ indices.T.astype( numpy.float64 ) ).T + translation
    a['value'] = numpy.ndarray.flatten( r ).astype( numpy.float64 )
    if args.binary is None:
        for e in a: print( f"{e['index'][0]},{e['index'][1]},{e['coordinates'][0]},{e['coordinates'][1]},{e['value']}" ) # quick and dirty, numpy.savetxt gets upset with fmt
    else:
        sys.stdout.buffer.write( a.tobytes() )
    
def raster( args ):
    if args.dry_run:
        x, y, width, height = _shape( args, _open( args ) )
        print( f'{x},{y},{height},{width}' )
        return
    sys.stdout.buffer.write( _raster( args, _open( args ) ).tobytes() )

def shape( args ): g = _open( args ); print( f'{g.RasterYSize},{g.RasterXSize},{g.RasterCount}' )
    
def transform( args ): g = _open( args ); print( ','.join([str(f) for f in g.GetGeoTransform()]) )

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers( help='operations; help: e.g: geotiff-cat raster --help' )
    parser_convert = subparsers.add_parser( 'convert', help='read x,y as csv on stdin; convert pixels to coordinates or coordinates to pixels; currently only x,y csv input/output is supported' )
    parser_convert.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_convert.add_argument( '--no-rounding', '--no-round', action='store_true', help='if --to=pixels, do not round pixels to int' )
    parser_convert.add_argument( '--no-append', action='store_true', help='do not output input points; if unclear try with and without this option and inspect output' )
    parser_convert.add_argument( '--to', choices=['pixels', 'coordinates'], type=str, required=True, help='convert to what' )
    parser_convert.set_defaults( func=convert )
    parser_points = subparsers.add_parser( 'points', help='geo points as csv or binary for given pixels (very likely to be buggy; debugging in progress...)' )
    parser_points.add_argument( 'geotiff_filename', type=str, help='path to geotiff file; output fields: pixel/x,pixel/y,x,y,band; if binary, output format: 2ui,3d' )
    parser_points.add_argument( '--as-coordinates', action='store_true', help='convenience option: --origin and --size are given as x,y in tiff coordinate space (e.g. lon,lat)' )
    parser_points.add_argument( '--binary', type=str, help='output binary format; currently only 2ui,3d is supported' )
    parser_points.add_argument( '--channel', '--band', default=1, type=int, help='which channel to output; starts with 1 (unfortunately); default: 1; todo: numpy-like slicing' )
    parser_points.add_argument( '--origin', '--begin', default='0,0', type=str, help='pixel values as <x>,<y>; default: 0,0' )
    parser_points.add_argument( '--size', type=str, nargs=1, help='size as <width>,<height>' )
    parser_points.set_defaults( func=points )
    parser_raster = subparsers.add_parser( 'raster', help='raster as binary for given pixels; note: output shape will be <height>,<width> as in numpy' )
    parser_raster.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_raster.add_argument( '--as-coordinates', '-c', action='store_true', help='convenience option: --origin and --size are given as x,y in tiff coordinate space (e.g. lon,lat)' )
    parser_raster.add_argument( '--channel', '--band', default=1, type=int, help='which channel to output; starts with 1 (unfortunately); default: 1; todo: numpy-like slicing' )
    parser_raster.add_argument( '--origin', '--begin', default='0,0', type=str, help='pixel values as <x>,<y>; default: 0,0' )
    parser_raster.add_argument( '--dry-run', '--dry', action='store_true', help='convenience option: print origin and size in pixels as <x>,<y>,<height>,<width> and exit' )
    parser_raster.add_argument( '--size', type=str, nargs=1, help='size as <width>,<height>' )
    parser_raster.set_defaults( func=raster )
    parser_shape = subparsers.add_parser( 'shape', help='output to stdout as csv: <height>,<width>,<bands>' )
    parser_shape.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_shape.set_defaults( func=shape )
    parser_transform = subparsers.add_parser( 'transform', help='output to stdout as csv: origin/x,step_along/x/x,step_along/x/y,origin/y,step_along/y/x,step_along/y/y; see https://gdal.org/user/raster_data_model.html' )
    parser_transform.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_transform.set_defaults( func=transform )
    args = parser.parse_args()
    try:
        try: import gdal
        except: from osgeo import gdal
    except:
        raise ModuleNotFoundError( gdal_installation )
    args.func( args )
