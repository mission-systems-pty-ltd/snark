#!/usr/bin/env python3

import argparse, sys

# todo! quick and dirty; write a ansible yaml file
gdal_installation = '''

gdal not found; install it as following
(see https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html)
note: gdal installation fails on ubuntu 18.04

sudo apt install --yes apt-utils software-properties-common
sudo add-apt-repository ppa:ubuntugis/ppa
sudo apt update
sudo apt install --yes gdal-bin libgdal-dev
export CPLUS_INCLUDE_PATH=/usr/include/gdal
export C_INCLUDE_PATH=/usr/include/gdal
ogrinfo --version
sudo pip3 install GDAL==<version-returned-by-ogrinfo>

'''

def _open( args ):
    g = gdal.Open( args.geotiff_filename )
    assert g is not None, RuntimeError( f'file does not exist or is not a valid geotiff: {args.geotiff_filename}' )
    return g

def raster( args ):
    g = _open( args )
    assert args.channel <= g.RasterCount, f'expected raster band between 1 and {g.RasterCount}; got: {args.channel}'
    x, y = [ int( s ) for s in args.origin.split( ',' ) ]
    width, height = [ int( s ) for s in args.size[0].split( ',' ) ]
    assert x + width <= g.RasterXSize, 'expected x + width < {g.RasterXSize}; got: x: {x} width: {width}'
    assert y + height <= g.RasterYSize, 'expected y + height < {g.RasterYSize}; got: y: {y} height: {height}'
    sys.stdout.buffer.write( g.GetRasterBand( 1 ).ReadAsArray( x, y, width, height ).tobytes() )

def shape( args ):
    g = _open( args )
    print( f'{g.RasterYSize},{g.RasterXSize},{g.RasterCount}' )
    
def transform( args ):
    g = _open( args )
    print( ','.join([str(f) for f in g.GetGeoTransform()]) )

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers( help='operations; help: e.g: geotiff-cat raster --help' )
    
    parser_raster = subparsers.add_parser( 'raster', help='raster as binary for given coordinates; note: output shape will be <height>,<width> as in numpy' )
    parser_raster.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_raster.add_argument( '--channel', '--band', default=1, type=int, help='which channel to output; starts with 1 (unfortunately); default: 1; todo: numpy-like slicing' )
    parser_raster.add_argument( '--origin', default='0,0', type=str, help='pixel values as <x>,<y>; default: 0,0' )
    parser_raster.add_argument( '--size', type=str, nargs=1, required=True, help='size in pixels as <width>,<height>' )
    parser_raster.set_defaults( func=raster )
    
    parser_shape = subparsers.add_parser( 'shape', help='output to stdout as csv: <height>,<width>,<bands>' )
    parser_shape.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_shape.set_defaults( func=shape )
    
    parser_transform = subparsers.add_parser( 'transform', help='output to stdout as csv: origin/x,step_along/x/x,step_along/x/y,origin/y,step_along/y/x,step_along/y/y; see https://gdal.org/user/raster_data_model.html' )
    parser_transform.add_argument( 'geotiff_filename', type=str, help='path to geotiff file' )
    parser_transform.set_defaults( func=transform )
    
    args = parser.parse_args()
    
    try:
        try: import gdal
        except: from osgeo import gdal
    except:
        raise ModuleNotFoundError( gdal_installation )
    args.func( args )
